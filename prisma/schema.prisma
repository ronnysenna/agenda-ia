generator client {
  provider      = "prisma-client-js"
  output        = "../src/generated/prisma"
  engineType    = "binary"
  binaryTargets = ["native", "debian-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(uuid())
  name             String
  email            String    @unique
  emailVerified    Boolean
  image            String?
  createdAt        DateTime
  updatedAt        DateTime
  address          String?
  birthDate        DateTime?
  cpfCnpj          String?
  phone            String?
  resetToken       String?
  resetTokenExpiry DateTime?
  site             String?
  description      String?
  accounts         Account[]
  sessions         Session[]

  // Novos relacionamentos para o AgendaAI
  services      Service[]
  timeSlots     TimeSlot[]
  appointments  Appointment[]
  businessHours BusinessHours?
  Collaborator  Collaborator[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id @default(uuid())
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

// Novos modelos para o AgendaAI

model Service {
  id          String   @id @default(uuid())
  name        String
  description String?
  duration    Int // em minutos
  price       Float?
  imageUrl    String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])

  appointments Appointment[]

  @@map("service")
}

model TimeSlot {
  id          String   @id @default(uuid())
  userId      String
  startTime   DateTime
  endTime     DateTime
  isAvailable Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])

  @@map("time_slot")
}

model Appointment {
  id          String            @id @default(uuid())
  userId      String
  serviceId   String
  clientName  String
  clientPhone String
  clientEmail String?
  startTime   DateTime
  endTime     DateTime
  status      AppointmentStatus @default(SCHEDULED)
  notes       String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  service Service @relation(fields: [serviceId], references: [id])

  @@map("appointment")
}

model BusinessHours {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  // Hor√°rios de funcionamento para cada dia da semana (em minutos desde a meia-noite)
  mondayStart    Int?
  mondayEnd      Int?
  tuesdayStart   Int?
  tuesdayEnd     Int?
  wednesdayStart Int?
  wednesdayEnd   Int?
  thursdayStart  Int?
  thursdayEnd    Int?
  fridayStart    Int?
  fridayEnd      Int?
  saturdayStart  Int?
  saturdayEnd    Int?
  sundayStart    Int?
  sundayEnd      Int?

  @@map("business_hours")
}

model Collaborator {
  id        String   @id @default(uuid())
  name      String
  role      String
  phone     String?
  imageUrl  String?
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  COMPLETED
  CANCELLED
  NO_SHOW
}
