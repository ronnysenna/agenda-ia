# Dockerfile para debug e diagnóstico
# Use este arquivo apenas para depuração quando o build principal falhar
FROM node:20.11-alpine

# Instalando ferramentas de debug
RUN apk add --no-cache libc6-compat python3 make g++ curl wget vim

# Diretório de trabalho
WORKDIR /app

# Copiar arquivos de projeto
COPY package.json package-lock.json* ./
COPY prisma ./prisma/
COPY .env.docker .env

# Instalar dependências
RUN npm install

# Verificar estrutura de diretórios
RUN find /app -type d | sort

# Criar diretório necessário para Prisma
RUN mkdir -p /app/node_modules/@prisma/client/runtime
RUN mkdir -p /app/src/generated/prisma

# Criar arquivos vazios para o wasm
RUN touch /app/node_modules/@prisma/client/runtime/wasm-engine-edge.js
RUN touch /app/node_modules/@prisma/client/runtime/wasm-compiler-edge.js

# Tentar gerar o cliente Prisma em modo debug
RUN DEBUG=* npx prisma generate

# Verificar conteúdo gerado
RUN find /app/src/generated -type f | sort

# Manter o container em execução para inspeção
CMD ["tail", "-f", "/dev/null"]
